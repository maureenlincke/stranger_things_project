{"ast":null,"code":"var _jsxFileName = \"/home/slinky/course_work/stranger_things_project/src/components/NewPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { BASE_URL } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewPosts = ({\n  isLoggedIn\n}) => {\n  _s();\n\n  const postsUrl = BASE_URL + '/posts';\n\n  const axios = require('axios').default;\n\n  async function getPosts() {\n    const posts = await axios.get(postsUrl);\n    console.log(posts);\n  }\n\n  useEffect(() => {\n    getPosts();\n  }, []); // function makeHeaders(token) {\n  //     //if token is not null\n  //     return {\n  //         'Content-Type': 'application/json',\n  //         'Authorization': 'Bearer' + token\n  //     }\n  //     //else\n  //     return {\n  //         'Content-Type': 'application/json'\n  //     }\n  // }\n\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [willDeliver, setWillDeliver] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Create a new post \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        event.preventDefault();\n\n        try {\n          const response = await fetch(postsUrl, {\n            method: 'POST',\n            header: makeHeaders(token),\n            body: JSON.stringify({\n              title,\n              description,\n              price,\n              location,\n              willDeliver\n            })\n          });\n          const result = await response.json();\n          setPosts([...posts, result.data.name]);\n        } catch (err) {\n          console.error(err);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"title\",\n        onChange: event => {\n          setTitle(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"description\",\n        onChange: event => {\n          setDescription(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"price\",\n        onChange: event => {\n          setPrice(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"location\",\n        onChange: event => {\n          setLocation(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: event => {\n          setWillDeliver(event.target.value);\n        },\n        children: \"Will Deliver?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 13\n  }, this);\n};\n\n_s(NewPosts, \"/ikJ0xOOfUX99o0o2CFLgWT/4/Y=\");\n\n_c = NewPosts;\nexport default NewPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPosts\");","map":{"version":3,"sources":["/home/slinky/course_work/stranger_things_project/src/components/NewPosts.js"],"names":["React","useEffect","useState","BASE_URL","NewPosts","isLoggedIn","postsUrl","axios","require","default","getPosts","posts","get","console","log","setPosts","title","setTitle","description","setDescription","price","setPrice","location","setLocation","willDeliver","setWillDeliver","event","preventDefault","response","fetch","method","header","makeHeaders","token","body","JSON","stringify","result","json","data","name","err","error","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BASE_URL } from '../constants'\n\nconst NewPosts = ({isLoggedIn}) => {\n    const postsUrl = BASE_URL + '/posts'\n    const axios = require('axios').default;\n\n    async function getPosts(){\n        const posts = await axios.get(postsUrl);\n        console.log(posts);\n    }\n\n    useEffect(() => {\n        getPosts();\n    }, [])\n\n    // function makeHeaders(token) {\n    //     //if token is not null\n    //     return {\n    //         'Content-Type': 'application/json',\n    //         'Authorization': 'Bearer' + token\n    //     }\n    //     //else\n    //     return {\n    //         'Content-Type': 'application/json'\n    //     }\n    // }\n\n    const [posts, setPosts] = useState([]);\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [willDeliver, setWillDeliver] = useState(false)\n\n    return (<div>\n        <h1> Create a new post </h1>\n        <form\n            onSubmit={async (event) => {\n                event.preventDefault();\n                try {\n                    const response = await fetch(\n                        postsUrl, \n                        {\n                            method: 'POST',\n                            header: makeHeaders(token),\n                            body: JSON.stringify({\n                                title,\n                                description,\n                                price,\n                                location,\n                                willDeliver,\n                            }),\n                        }\n                    );\n                    const result = await response.json();\n                    setPosts([\n                        ...posts,\n                        result.data.name\n                    ])\n                } catch (err) {\n                    console.error(err);\n                }\n            }}\n            >\n            \n            <input\n                type='text'\n                placeholder='title'\n                onChange={(event) => {\n                    setTitle(event.target.value)\n                }}\n            >\n            </input>\n            <input\n                type='text'\n                placeholder='description'\n                onChange={(event) => {\n                    setDescription(event.target.value)\n                }}\n            >\n            </input>\n            <input\n                type='text'\n                placeholder='price'\n                onChange={(event) => {\n                    setPrice(event.target.value)\n                }}\n            >\n            </input>\n            <input\n                type='text'\n                placeholder='location'\n                onChange={(event) => {\n                    setLocation(event.target.value)\n                }}\n            >\n            </input>\n            <input\n                type='checkbox'\n                onChange={(event) => {\n                    setWillDeliver(event.target.value)\n                }}\n            >Will Deliver?\n            </input>\n        </form>\n    </div>\n    )\n}\n\nexport default NewPosts;"]},"metadata":{},"sourceType":"module"}